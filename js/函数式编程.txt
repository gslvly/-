概念：
	函数式编程：没有污染，就如函数一样，不会改变全局变量。
	高阶函数：参数为一个或者多个函数，返回值为一个函数。
	柯里化：就是把一个多参数的函数，转化为单参数函数。
	函子：是一个容器，包含了值和变形关系。比较特殊的是，它的变形关系可以依次作用于每一个值，将当前容器变形成另一个容器。
	
函子实现：

class Functor {
  constructor(val) { 
    this.val = val; 
  }
  static of(val){
   return new Functor(val)
  }
  map(f) {
    return new Functor(f(this.val));
  }
}

使用：Functor.of(2).map(function (two) {
  return two + 2;
}); 每次一map都返回另一个容器（使用new 从新实例化） 最终值都存在val中

封装：



函数式编程里面的运算，都是通过函子完成，即运算不直接针对值，而是针对这个值的容器----函子。函子本身具有对外接口（map方法），各种函数就是运算符，通过接口接入容器，引发容器里面的值的变形。