1 byte = 8 bit(位)
一个字节 一般为 8位 二进制
ascii 码中 英文对应1个字节(8位二进制 10进制:127) 中文为2个字节（16位2进制 255）
utf8 码中 英文对应1个字节 中文3个字节

运算符
 所有字节其实是合在一起的。但是为了视图好看，就让他们分为8位一个字节，按字节操作，更为直观。
 a >> 2 右移2位
 ~a  非
 a|b 或 

进制： 2进制 4 进制 …… 64进制等，
    64：ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
    注意：这儿不是数字开头的
进制转换： 4进制就让 11 就让11一堆。8进制 111 一堆， 16进制 1111 一堆,32:11111,64:111111.
2禁止转16进制  11100101 = 1110 0101 = 14 5 = E5
64进制： 
  2^6  64转为二进制 111111 2^5+ 2^4+2^3+2^2+2^1+1 = 2^6-1
  2进制转换规则：
    ①.把3个字符变成4个字符。
    ②每76个字符加一个换行符。
    ③.最后的结束符也要处理。
    转换前 11111111, 11111111, 11111111 （二进制）
    转换后 00111111, 00111111, 00111111, 00111111 （二进制，因为base64只需要6位就能满足，但是一个字节是8位，所以多出来2个没用的0）


各种进制转换成数字
  parseInt('a', 16)    字符串转数字 10
  'a'.toString(2)      数字转字符串
ascii（可看作base128） 转 base64
  ascii有8位二进制  比64进制（无法表示符号）多了2位所以64进制需要重新排列。且排列后会占用更多空间（多用 35.1%， base64 74个字符需要一个回车）

arraybuffer 
  它的每一个元素 都是按照10进制来显示的
  Int8Array 8位二进制，就是它的每一个元素都是8位，new Int8Array(9) 占有9个长度。
 a[0] = parseInt('a', 16) = 10
 

ascii 转 进制
  1、toString(2) 可以转成2进制字符串
  2、string.charCodeAt() 可以将ascii 转成10进制值。
  'i'.charCodeAt().toString(2) 可以将i转成2进制（unicode:utf-8）
    只能一个字符一个字符的转
  
utf8（对应int8array 1个字节8位） 转 数值
  str.charCodeAt(index)
数值转utf8
  String.fromCharCode(72,69,47)

小端字节序：
  Int8Array([1,2]) 转为 Int16Array 为 513 
    将2排前面 00000010 00000001 = 513
 in8 = [1,2,3,4,4,3,1,7] in32=[4-3-2-1, 7-1-3-4] 32是8的4倍，所以in8长度才能转换为32位的。

base64 转成 utf8 
  atob(base64)
utf8 转成 base64 
  btoa

转换速率
  str 转 arraybuffer
    最快  
        let c =  new ArrayBuffer(str.length)
        let buffer = new Uint8Array(c)
        for(let i= 0;i < str.length;i++) {
          buffer[i] = str.charCodeAt(i)
        } 
    其次 
        const bb = new TextEncoder
        let b = bb.encode(str)

    最后 
        new Blob([str]) 使用fileReader

  str 转 arraybuffer
    1、TextDecoder 
    2、blob 和 FileReader
    3、String.fromCharcode